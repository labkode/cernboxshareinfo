// Package models contains the types for schema 'mydb'.
package models

// GENERATED BY XO. DO NOT EDIT.

import "errors"

// DimensionDate represents a row from 'mydb.dimension_date'.
type DimensionDate struct {
	Ts    int `json:"ts"`    // ts
	Day   int `json:"day"`   // day
	Month int `json:"month"` // month
	Year  int `json:"year"`  // year

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the DimensionDate exists in the database.
func (dd *DimensionDate) Exists() bool {
	return dd._exists
}

// Deleted provides information if the DimensionDate has been deleted from the database.
func (dd *DimensionDate) Deleted() bool {
	return dd._deleted
}

// Insert inserts the DimensionDate to the database.
func (dd *DimensionDate) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if dd._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO mydb.dimension_date (` +
		`day, month, year` +
		`) VALUES (` +
		`?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, dd.Day, dd.Month, dd.Year)
	res, err := db.Exec(sqlstr, dd.Day, dd.Month, dd.Year)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	dd.Ts = int(id)
	dd._exists = true

	return nil
}

// Update updates the DimensionDate in the database.
func (dd *DimensionDate) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !dd._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if dd._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE mydb.dimension_date SET ` +
		`day = ?, month = ?, year = ?` +
		` WHERE ts = ?`

	// run query
	XOLog(sqlstr, dd.Day, dd.Month, dd.Year, dd.Ts)
	_, err = db.Exec(sqlstr, dd.Day, dd.Month, dd.Year, dd.Ts)
	return err
}

// Save saves the DimensionDate to the database.
func (dd *DimensionDate) Save(db XODB) error {
	if dd.Exists() {
		return dd.Update(db)
	}

	return dd.Insert(db)
}

// Delete deletes the DimensionDate from the database.
func (dd *DimensionDate) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !dd._exists {
		return nil
	}

	// if deleted, bail
	if dd._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM mydb.dimension_date WHERE ts = ?`

	// run query
	XOLog(sqlstr, dd.Ts)
	_, err = db.Exec(sqlstr, dd.Ts)
	if err != nil {
		return err
	}

	// set deleted
	dd._deleted = true

	return nil
}

// DimensionDateByTs retrieves a row from 'mydb.dimension_date' as a DimensionDate.
//
// Generated from index 'dimension_date_ts_pkey'.
func DimensionDateByTs(db XODB, ts int) (*DimensionDate, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`ts, day, month, year ` +
		`FROM mydb.dimension_date ` +
		`WHERE ts = ?`

	// run query
	XOLog(sqlstr, ts)
	dd := DimensionDate{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, ts).Scan(&dd.Ts, &dd.Day, &dd.Month, &dd.Year)
	if err != nil {
		return nil, err
	}

	return &dd, nil
}
