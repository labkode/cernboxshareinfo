// Package models contains the types for schema 'mydb'.
package models

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// DimensionDepartment represents a row from 'mydb.dimension_department'.
type DimensionDepartment struct {
	Department string         `json:"department"` // department
	Opaque     sql.NullString `json:"opaque"`     // opaque

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the DimensionDepartment exists in the database.
func (dd *DimensionDepartment) Exists() bool {
	return dd._exists
}

// Deleted provides information if the DimensionDepartment has been deleted from the database.
func (dd *DimensionDepartment) Deleted() bool {
	return dd._deleted
}

// Insert inserts the DimensionDepartment to the database.
func (dd *DimensionDepartment) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if dd._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO mydb.dimension_department (` +
		`department,` +
		`opaque` +
		`) VALUES (` +
		`?,` +
		`?` +
		`)`

	// run query
	XOLog(sqlstr, dd.Opaque)
	_, err = db.Exec(sqlstr, dd.Department, dd.Opaque)
	if err != nil {
		return err
	}

	dd._exists = true

	return nil
}

// Update updates the DimensionDepartment in the database.
func (dd *DimensionDepartment) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !dd._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if dd._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE mydb.dimension_department SET ` +
		`opaque = ?` +
		` WHERE department = ?`

	// run query
	XOLog(sqlstr, dd.Opaque, dd.Department)
	_, err = db.Exec(sqlstr, dd.Opaque, dd.Department)
	return err
}

// Save saves the DimensionDepartment to the database.
func (dd *DimensionDepartment) Save(db XODB) error {
	if dd.Exists() {
		return dd.Update(db)
	}

	return dd.Insert(db)
}

// Delete deletes the DimensionDepartment from the database.
func (dd *DimensionDepartment) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !dd._exists {
		return nil
	}

	// if deleted, bail
	if dd._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM mydb.dimension_department WHERE department = ?`

	// run query
	XOLog(sqlstr, dd.Department)
	_, err = db.Exec(sqlstr, dd.Department)
	if err != nil {
		return err
	}

	// set deleted
	dd._deleted = true

	return nil
}

// DimensionDepartmentByDepartment retrieves a row from 'mydb.dimension_department' as a DimensionDepartment.
//
// Generated from index 'dimension_department_department_pkey'.
func DimensionDepartmentByDepartment(db XODB, department string) (*DimensionDepartment, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`department, opaque ` +
		`FROM mydb.dimension_department ` +
		`WHERE department = ?`

	// run query
	XOLog(sqlstr, department)
	dd := DimensionDepartment{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, department).Scan(&dd.Department, &dd.Opaque)
	if err != nil {
		return nil, err
	}

	return &dd, nil
}
