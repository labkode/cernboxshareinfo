// Package models contains the types for schema 'mydb'.
package models

// GENERATED BY XO. DO NOT EDIT.

import "errors"

// DimensionGroup represents a row from 'mydb.dimension_group'.
type DimensionGroup struct {
	ID    int    `json:"id"`    // id
	Group string `json:"group"` // group

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the DimensionGroup exists in the database.
func (dg *DimensionGroup) Exists() bool {
	return dg._exists
}

// Deleted provides information if the DimensionGroup has been deleted from the database.
func (dg *DimensionGroup) Deleted() bool {
	return dg._deleted
}

// Insert inserts the DimensionGroup to the database.
func (dg *DimensionGroup) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if dg._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO mydb.dimension_group (` +
		`group` +
		`) VALUES (` +
		`?` +
		`)`

	// run query
	XOLog(sqlstr, dg.Group)
	res, err := db.Exec(sqlstr, dg.Group)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	dg.ID = int(id)
	dg._exists = true

	return nil
}

// Update updates the DimensionGroup in the database.
func (dg *DimensionGroup) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !dg._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if dg._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE mydb.dimension_group SET ` +
		`group = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, dg.Group, dg.ID)
	_, err = db.Exec(sqlstr, dg.Group, dg.ID)
	return err
}

// Save saves the DimensionGroup to the database.
func (dg *DimensionGroup) Save(db XODB) error {
	if dg.Exists() {
		return dg.Update(db)
	}

	return dg.Insert(db)
}

// Delete deletes the DimensionGroup from the database.
func (dg *DimensionGroup) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !dg._exists {
		return nil
	}

	// if deleted, bail
	if dg._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM mydb.dimension_group WHERE id = ?`

	// run query
	XOLog(sqlstr, dg.ID)
	_, err = db.Exec(sqlstr, dg.ID)
	if err != nil {
		return err
	}

	// set deleted
	dg._deleted = true

	return nil
}

// DimensionGroupByID retrieves a row from 'mydb.dimension_group' as a DimensionGroup.
//
// Generated from index 'dimension_group_id_pkey'.
func DimensionGroupByID(db XODB, id int) (*DimensionGroup, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, group ` +
		`FROM mydb.dimension_group ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	dg := DimensionGroup{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&dg.ID, &dg.Group)
	if err != nil {
		return nil, err
	}

	return &dg, nil
}
