// Package models contains the types for schema 'mydb'.
package models

// GENERATED BY XO. DO NOT EDIT.

import "errors"

// FactShare represents a row from 'mydb.fact_shares'.
type FactShare struct {
	ID               int    `json:"id"`                // id
	OwnerLogin       string `json:"owner_login"`       // owner_login
	OwnerUID         int    `json:"owner_uid"`         // owner_uid
	OwnerDepartment  string `json:"owner_department"`  // owner_department
	OwnerGroup       string `json:"owner_group"`       // owner_group
	OwnerCompany     string `json:"owner_company"`     // owner_company
	ShareeLogin      string `json:"sharee_login"`      // sharee_login
	ShareeUID        int    `json:"sharee_uid"`        // sharee_uid
	ShareeDepartment string `json:"sharee_department"` // sharee_department
	ShareeGroup      string `json:"sharee_group"`      // sharee_group
	ShareeCompany    string `json:"sharee_company"`    // sharee_company
	Stime            int    `json:"stime"`             // stime

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the FactShare exists in the database.
func (fs *FactShare) Exists() bool {
	return fs._exists
}

// Deleted provides information if the FactShare has been deleted from the database.
func (fs *FactShare) Deleted() bool {
	return fs._deleted
}

// Insert inserts the FactShare to the database.
func (fs *FactShare) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if fs._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO mydb.fact_shares (` +
		`owner_login, owner_uid, owner_department, owner_group, owner_company, sharee_login, sharee_uid, sharee_department, sharee_group, sharee_company, stime` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, fs.OwnerLogin, fs.OwnerUID, fs.OwnerDepartment, fs.OwnerGroup, fs.OwnerCompany, fs.ShareeLogin, fs.ShareeUID, fs.ShareeDepartment, fs.ShareeGroup, fs.ShareeCompany, fs.Stime)
	res, err := db.Exec(sqlstr, fs.OwnerLogin, fs.OwnerUID, fs.OwnerDepartment, fs.OwnerGroup, fs.OwnerCompany, fs.ShareeLogin, fs.ShareeUID, fs.ShareeDepartment, fs.ShareeGroup, fs.ShareeCompany, fs.Stime)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	fs.ID = int(id)
	fs._exists = true

	return nil
}

// Update updates the FactShare in the database.
func (fs *FactShare) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !fs._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if fs._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE mydb.fact_shares SET ` +
		`owner_login = ?, owner_uid = ?, owner_department = ?, owner_group = ?, owner_company = ?, sharee_login = ?, sharee_uid = ?, sharee_department = ?, sharee_group = ?, sharee_company = ?, stime = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, fs.OwnerLogin, fs.OwnerUID, fs.OwnerDepartment, fs.OwnerGroup, fs.OwnerCompany, fs.ShareeLogin, fs.ShareeUID, fs.ShareeDepartment, fs.ShareeGroup, fs.ShareeCompany, fs.Stime, fs.ID)
	_, err = db.Exec(sqlstr, fs.OwnerLogin, fs.OwnerUID, fs.OwnerDepartment, fs.OwnerGroup, fs.OwnerCompany, fs.ShareeLogin, fs.ShareeUID, fs.ShareeDepartment, fs.ShareeGroup, fs.ShareeCompany, fs.Stime, fs.ID)
	return err
}

// Save saves the FactShare to the database.
func (fs *FactShare) Save(db XODB) error {
	if fs.Exists() {
		return fs.Update(db)
	}

	return fs.Insert(db)
}

// Delete deletes the FactShare from the database.
func (fs *FactShare) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !fs._exists {
		return nil
	}

	// if deleted, bail
	if fs._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM mydb.fact_shares WHERE id = ?`

	// run query
	XOLog(sqlstr, fs.ID)
	_, err = db.Exec(sqlstr, fs.ID)
	if err != nil {
		return err
	}

	// set deleted
	fs._deleted = true

	return nil
}

// DimensionCompanyByOwnerCompany returns the DimensionCompany associated with the FactShare's OwnerCompany (owner_company).
//
// Generated from foreign key 'fact_shares_owner_company_company_company'.
func (fs *FactShare) DimensionCompanyByOwnerCompany(db XODB) (*DimensionCompany, error) {
	return DimensionCompanyByCompany(db, fs.OwnerCompany)
}

// DimensionDepartmentByOwnerDepartment returns the DimensionDepartment associated with the FactShare's OwnerDepartment (owner_department).
//
// Generated from foreign key 'fact_shares_owner_department_dimension_department_department'.
func (fs *FactShare) DimensionDepartmentByOwnerDepartment(db XODB) (*DimensionDepartment, error) {
	return DimensionDepartmentByDepartment(db, fs.OwnerDepartment)
}

// DimensionGroupByOwnerGroup returns the DimensionGroup associated with the FactShare's OwnerGroup (owner_group).
//
// Generated from foreign key 'fact_shares_owner_group_group_group'.
func (fs *FactShare) DimensionGroupByOwnerGroup(db XODB) (*DimensionGroup, error) {
	return DimensionGroupByGroup(db, fs.OwnerGroup)
}

// DimensionDepartmentByShareeDepartment returns the DimensionDepartment associated with the FactShare's ShareeDepartment (sharee_department).
//
// Generated from foreign key 'fact_shares_sahree_department_department_department'.
func (fs *FactShare) DimensionDepartmentByShareeDepartment(db XODB) (*DimensionDepartment, error) {
	return DimensionDepartmentByDepartment(db, fs.ShareeDepartment)
}

// DimensionCompanyByShareeCompany returns the DimensionCompany associated with the FactShare's ShareeCompany (sharee_company).
//
// Generated from foreign key 'fact_shares_sharee_company_company_company'.
func (fs *FactShare) DimensionCompanyByShareeCompany(db XODB) (*DimensionCompany, error) {
	return DimensionCompanyByCompany(db, fs.ShareeCompany)
}

// DimensionGroupByShareeGroup returns the DimensionGroup associated with the FactShare's ShareeGroup (sharee_group).
//
// Generated from foreign key 'fact_shares_sharee_group_group_group'.
func (fs *FactShare) DimensionGroupByShareeGroup(db XODB) (*DimensionGroup, error) {
	return DimensionGroupByGroup(db, fs.ShareeGroup)
}

// DimensionDate returns the DimensionDate associated with the FactShare's Stime (stime).
//
// Generated from foreign key 'fact_shares_stime_date_ts'.
func (fs *FactShare) DimensionDate(db XODB) (*DimensionDate, error) {
	return DimensionDateByTs(db, fs.Stime)
}

// FactShareByID retrieves a row from 'mydb.fact_shares' as a FactShare.
//
// Generated from index 'fact_shares_id_pkey'.
func FactShareByID(db XODB, id int) (*FactShare, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, owner_login, owner_uid, owner_department, owner_group, owner_company, sharee_login, sharee_uid, sharee_department, sharee_group, sharee_company, stime ` +
		`FROM mydb.fact_shares ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	fs := FactShare{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&fs.ID, &fs.OwnerLogin, &fs.OwnerUID, &fs.OwnerDepartment, &fs.OwnerGroup, &fs.OwnerCompany, &fs.ShareeLogin, &fs.ShareeUID, &fs.ShareeDepartment, &fs.ShareeGroup, &fs.ShareeCompany, &fs.Stime)
	if err != nil {
		return nil, err
	}

	return &fs, nil
}

// FactSharesByOwnerCompany retrieves a row from 'mydb.fact_shares' as a FactShare.
//
// Generated from index 'fact_shares_owner_company_company_company_idx'.
func FactSharesByOwnerCompany(db XODB, ownerCompany string) ([]*FactShare, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, owner_login, owner_uid, owner_department, owner_group, owner_company, sharee_login, sharee_uid, sharee_department, sharee_group, sharee_company, stime ` +
		`FROM mydb.fact_shares ` +
		`WHERE owner_company = ?`

	// run query
	XOLog(sqlstr, ownerCompany)
	q, err := db.Query(sqlstr, ownerCompany)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*FactShare{}
	for q.Next() {
		fs := FactShare{
			_exists: true,
		}

		// scan
		err = q.Scan(&fs.ID, &fs.OwnerLogin, &fs.OwnerUID, &fs.OwnerDepartment, &fs.OwnerGroup, &fs.OwnerCompany, &fs.ShareeLogin, &fs.ShareeUID, &fs.ShareeDepartment, &fs.ShareeGroup, &fs.ShareeCompany, &fs.Stime)
		if err != nil {
			return nil, err
		}

		res = append(res, &fs)
	}

	return res, nil
}

// FactSharesByOwnerDepartment retrieves a row from 'mydb.fact_shares' as a FactShare.
//
// Generated from index 'fact_shares_owner_department_dimension_department_departmen_idx'.
func FactSharesByOwnerDepartment(db XODB, ownerDepartment string) ([]*FactShare, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, owner_login, owner_uid, owner_department, owner_group, owner_company, sharee_login, sharee_uid, sharee_department, sharee_group, sharee_company, stime ` +
		`FROM mydb.fact_shares ` +
		`WHERE owner_department = ?`

	// run query
	XOLog(sqlstr, ownerDepartment)
	q, err := db.Query(sqlstr, ownerDepartment)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*FactShare{}
	for q.Next() {
		fs := FactShare{
			_exists: true,
		}

		// scan
		err = q.Scan(&fs.ID, &fs.OwnerLogin, &fs.OwnerUID, &fs.OwnerDepartment, &fs.OwnerGroup, &fs.OwnerCompany, &fs.ShareeLogin, &fs.ShareeUID, &fs.ShareeDepartment, &fs.ShareeGroup, &fs.ShareeCompany, &fs.Stime)
		if err != nil {
			return nil, err
		}

		res = append(res, &fs)
	}

	return res, nil
}

// FactSharesByOwnerGroup retrieves a row from 'mydb.fact_shares' as a FactShare.
//
// Generated from index 'fact_shares_owner_group_group_group_idx'.
func FactSharesByOwnerGroup(db XODB, ownerGroup string) ([]*FactShare, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, owner_login, owner_uid, owner_department, owner_group, owner_company, sharee_login, sharee_uid, sharee_department, sharee_group, sharee_company, stime ` +
		`FROM mydb.fact_shares ` +
		`WHERE owner_group = ?`

	// run query
	XOLog(sqlstr, ownerGroup)
	q, err := db.Query(sqlstr, ownerGroup)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*FactShare{}
	for q.Next() {
		fs := FactShare{
			_exists: true,
		}

		// scan
		err = q.Scan(&fs.ID, &fs.OwnerLogin, &fs.OwnerUID, &fs.OwnerDepartment, &fs.OwnerGroup, &fs.OwnerCompany, &fs.ShareeLogin, &fs.ShareeUID, &fs.ShareeDepartment, &fs.ShareeGroup, &fs.ShareeCompany, &fs.Stime)
		if err != nil {
			return nil, err
		}

		res = append(res, &fs)
	}

	return res, nil
}

// FactSharesByShareeDepartment retrieves a row from 'mydb.fact_shares' as a FactShare.
//
// Generated from index 'fact_shares_sahree_department_department_department_idx'.
func FactSharesByShareeDepartment(db XODB, shareeDepartment string) ([]*FactShare, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, owner_login, owner_uid, owner_department, owner_group, owner_company, sharee_login, sharee_uid, sharee_department, sharee_group, sharee_company, stime ` +
		`FROM mydb.fact_shares ` +
		`WHERE sharee_department = ?`

	// run query
	XOLog(sqlstr, shareeDepartment)
	q, err := db.Query(sqlstr, shareeDepartment)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*FactShare{}
	for q.Next() {
		fs := FactShare{
			_exists: true,
		}

		// scan
		err = q.Scan(&fs.ID, &fs.OwnerLogin, &fs.OwnerUID, &fs.OwnerDepartment, &fs.OwnerGroup, &fs.OwnerCompany, &fs.ShareeLogin, &fs.ShareeUID, &fs.ShareeDepartment, &fs.ShareeGroup, &fs.ShareeCompany, &fs.Stime)
		if err != nil {
			return nil, err
		}

		res = append(res, &fs)
	}

	return res, nil
}

// FactSharesByShareeCompany retrieves a row from 'mydb.fact_shares' as a FactShare.
//
// Generated from index 'fact_shares_sharee_company_company_company_idx'.
func FactSharesByShareeCompany(db XODB, shareeCompany string) ([]*FactShare, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, owner_login, owner_uid, owner_department, owner_group, owner_company, sharee_login, sharee_uid, sharee_department, sharee_group, sharee_company, stime ` +
		`FROM mydb.fact_shares ` +
		`WHERE sharee_company = ?`

	// run query
	XOLog(sqlstr, shareeCompany)
	q, err := db.Query(sqlstr, shareeCompany)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*FactShare{}
	for q.Next() {
		fs := FactShare{
			_exists: true,
		}

		// scan
		err = q.Scan(&fs.ID, &fs.OwnerLogin, &fs.OwnerUID, &fs.OwnerDepartment, &fs.OwnerGroup, &fs.OwnerCompany, &fs.ShareeLogin, &fs.ShareeUID, &fs.ShareeDepartment, &fs.ShareeGroup, &fs.ShareeCompany, &fs.Stime)
		if err != nil {
			return nil, err
		}

		res = append(res, &fs)
	}

	return res, nil
}

// FactSharesByShareeGroup retrieves a row from 'mydb.fact_shares' as a FactShare.
//
// Generated from index 'fact_shares_sharee_group_group_group_idx'.
func FactSharesByShareeGroup(db XODB, shareeGroup string) ([]*FactShare, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, owner_login, owner_uid, owner_department, owner_group, owner_company, sharee_login, sharee_uid, sharee_department, sharee_group, sharee_company, stime ` +
		`FROM mydb.fact_shares ` +
		`WHERE sharee_group = ?`

	// run query
	XOLog(sqlstr, shareeGroup)
	q, err := db.Query(sqlstr, shareeGroup)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*FactShare{}
	for q.Next() {
		fs := FactShare{
			_exists: true,
		}

		// scan
		err = q.Scan(&fs.ID, &fs.OwnerLogin, &fs.OwnerUID, &fs.OwnerDepartment, &fs.OwnerGroup, &fs.OwnerCompany, &fs.ShareeLogin, &fs.ShareeUID, &fs.ShareeDepartment, &fs.ShareeGroup, &fs.ShareeCompany, &fs.Stime)
		if err != nil {
			return nil, err
		}

		res = append(res, &fs)
	}

	return res, nil
}

// FactSharesByStime retrieves a row from 'mydb.fact_shares' as a FactShare.
//
// Generated from index 'fact_shares_stime_ts_idx'.
func FactSharesByStime(db XODB, stime int) ([]*FactShare, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, owner_login, owner_uid, owner_department, owner_group, owner_company, sharee_login, sharee_uid, sharee_department, sharee_group, sharee_company, stime ` +
		`FROM mydb.fact_shares ` +
		`WHERE stime = ?`

	// run query
	XOLog(sqlstr, stime)
	q, err := db.Query(sqlstr, stime)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*FactShare{}
	for q.Next() {
		fs := FactShare{
			_exists: true,
		}

		// scan
		err = q.Scan(&fs.ID, &fs.OwnerLogin, &fs.OwnerUID, &fs.OwnerDepartment, &fs.OwnerGroup, &fs.OwnerCompany, &fs.ShareeLogin, &fs.ShareeUID, &fs.ShareeDepartment, &fs.ShareeGroup, &fs.ShareeCompany, &fs.Stime)
		if err != nil {
			return nil, err
		}

		res = append(res, &fs)
	}

	return res, nil
}
